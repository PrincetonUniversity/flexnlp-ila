// =============================================================================
// MIT License
//
// Copyright (c) 2019 Princeton University
//
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in
// all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
// SOFTWARE.
// =============================================================================

// File: config_state_gb.cc

#include <ilang/ilang++.h>

#include <flex/gb_config.h>

namespace ilang {

namespace flex {

void DefineGBConfigState(Ila& m) {

  // GB specific
  // - GB attention
  // - GB control
  // - GB core memory manager large
  // - GB core memory manager small
  // - GB layer norm
  // - GB layer reduce
  // - GB zero padding

  // GB attention
  m.NewBvState(GB_ATTENTION_CONFIG_REG_IS_VALID,
               GB_ATTENTION_CONFIG_REG_IS_VALID_WIDTH);

  m.NewBvState(GB_ATTENTION_CONFIG_REG_MEMORY_INDEX_1,
               GB_ATTENTION_CONFIG_REG_MEMORY_INDEX_1_WIDTH);

  m.NewBvState(GB_ATTENTION_CONFIG_REG_MEMORY_INDEX_2,
               GB_ATTENTION_CONFIG_REG_MEMORY_INDEX_2_WIDTH);

  m.NewBvState(GB_ATTENTION_CONFIG_REG_NUM_VECTOR_1,
               GB_ATTENTION_CONFIG_REG_NUM_VECTOR_1_WIDTH);

  m.NewBvState(GB_ATTENTION_CONFIG_REG_NUM_TIMESTEP_1,
               GB_ATTENTION_CONFIG_REG_NUM_TIMESTEP_1_WIDTH);

  m.NewBvState(GB_ATTENTION_CONFIG_REG_ADPBIAS_1,
               GB_ATTENTION_CONFIG_REG_ADPBIAS_1_WIDTH);

  m.NewBvState(GB_ATTENTION_CONFIG_REG_ADPBIAS_2,
               GB_ATTENTION_CONFIG_REG_ADPBIAS_2_WIDTH);

  m.NewBvState(GB_ATTENTION_CONFIG_REG_ADPBIAS_3,
               GB_ATTENTION_CONFIG_REG_ADPBIAS_3_WIDTH);

  m.NewBvState(GB_ATTENTION_CONFIG_REG_ADPBIAS_4,
               GB_ATTENTION_CONFIG_REG_ADPBIAS_4_WIDTH);

  // GB control
  m.NewBvState(GB_CONTROL_CONFIG_REG_IS_VALID,
               GB_CONTROL_CONFIG_REG_IS_VALID_WIDTH);

  m.NewBvState(GB_CONTROL_CONFIG_REG_MODE, GB_CONTROL_CONFIG_REG_MODE_WIDTH);

  m.NewBvState(GB_CONTROL_CONFIG_REG_IS_RNN,
               GB_CONTROL_CONFIG_REG_IS_RNN_WIDTH);

  m.NewBvState(GB_CONTROL_CONFIG_REG_MEMORY_INDEX_1,
               GB_CONTROL_CONFIG_REG_MEMORY_INDEX_1_WIDTH);

  m.NewBvState(GB_CONTROL_CONFIG_REG_MEMORY_INDEX_2,
               GB_CONTROL_CONFIG_REG_MEMORY_INDEX_2_WIDTH);

  m.NewBvState(GB_CONTROL_CONFIG_REG_NUM_VECTOR_1,
               GB_CONTROL_CONFIG_REG_NUM_VECTOR_1_WIDTH);

  m.NewBvState(GB_CONTROL_CONFIG_REG_NUM_VECTOR_2,
               GB_CONTROL_CONFIG_REG_NUM_VECTOR_2_WIDTH);

  m.NewBvState(GB_CONTROL_CONFIG_REG_NUM_TIMESTEP_1,
               GB_CONTROL_CONFIG_REG_NUM_TIMESTEP_1_WIDTH);

  // GB core memory manager large
  m.NewBvState(GB_CORE_MEM_MNGR_LARGE_CONFIG_REG_NUM_VECTOR_0,
               GB_CORE_MEM_MNGR_LARGE_CONFIG_REG_NUM_VECTOR_0_WIDTH);

  m.NewBvState(GB_CORE_MEM_MNGR_LARGE_CONFIG_REG_BASE_LARGE_0,
               GB_CORE_MEM_MNGR_LARGE_CONFIG_REG_BASE_LARGE_0_WIDTH);

  m.NewBvState(GB_CORE_MEM_MNGR_LARGE_CONFIG_REG_NUM_VECTOR_1,
               GB_CORE_MEM_MNGR_LARGE_CONFIG_REG_NUM_VECTOR_1_WIDTH);

  m.NewBvState(GB_CORE_MEM_MNGR_LARGE_CONFIG_REG_BASE_LARGE_1,
               GB_CORE_MEM_MNGR_LARGE_CONFIG_REG_BASE_LARGE_1_WIDTH);

  m.NewBvState(GB_CORE_MEM_MNGR_LARGE_CONFIG_REG_NUM_VECTOR_2,
               GB_CORE_MEM_MNGR_LARGE_CONFIG_REG_NUM_VECTOR_2_WIDTH);

  m.NewBvState(GB_CORE_MEM_MNGR_LARGE_CONFIG_REG_BASE_LARGE_2,
               GB_CORE_MEM_MNGR_LARGE_CONFIG_REG_BASE_LARGE_2_WIDTH);

  m.NewBvState(GB_CORE_MEM_MNGR_LARGE_CONFIG_REG_NUM_VECTOR_3,
               GB_CORE_MEM_MNGR_LARGE_CONFIG_REG_NUM_VECTOR_3_WIDTH);

  m.NewBvState(GB_CORE_MEM_MNGR_LARGE_CONFIG_REG_BASE_LARGE_3,
               GB_CORE_MEM_MNGR_LARGE_CONFIG_REG_BASE_LARGE_3_WIDTH);

  // GB core memory manager small
  m.NewBvState(GB_CORE_MEM_MNGR_SMALL_CONFIG_REG_BASE_SMALL_0,
               GB_CORE_MEM_MNGR_SMALL_CONFIG_REG_BASE_SMALL_0_WIDTH);

  m.NewBvState(GB_CORE_MEM_MNGR_SMALL_CONFIG_REG_BASE_SMALL_1,
               GB_CORE_MEM_MNGR_SMALL_CONFIG_REG_BASE_SMALL_1_WIDTH);

  m.NewBvState(GB_CORE_MEM_MNGR_SMALL_CONFIG_REG_BASE_SMALL_2,
               GB_CORE_MEM_MNGR_SMALL_CONFIG_REG_BASE_SMALL_2_WIDTH);

  m.NewBvState(GB_CORE_MEM_MNGR_SMALL_CONFIG_REG_BASE_SMALL_3,
               GB_CORE_MEM_MNGR_SMALL_CONFIG_REG_BASE_SMALL_3_WIDTH);

  m.NewBvState(GB_CORE_MEM_MNGR_SMALL_CONFIG_REG_BASE_SMALL_4,
               GB_CORE_MEM_MNGR_SMALL_CONFIG_REG_BASE_SMALL_4_WIDTH);

  m.NewBvState(GB_CORE_MEM_MNGR_SMALL_CONFIG_REG_BASE_SMALL_5,
               GB_CORE_MEM_MNGR_SMALL_CONFIG_REG_BASE_SMALL_5_WIDTH);

  m.NewBvState(GB_CORE_MEM_MNGR_SMALL_CONFIG_REG_BASE_SMALL_6,
               GB_CORE_MEM_MNGR_SMALL_CONFIG_REG_BASE_SMALL_6_WIDTH);

  m.NewBvState(GB_CORE_MEM_MNGR_SMALL_CONFIG_REG_BASE_SMALL_7,
               GB_CORE_MEM_MNGR_SMALL_CONFIG_REG_BASE_SMALL_7_WIDTH);

  // GB layer norm
  m.NewBvState(GB_LAYER_NORM_CONFIG_REG_IS_VALID,
               GB_LAYER_NORM_CONFIG_REG_IS_VALID_WIDTH);

  m.NewBvState(GB_LAYER_NORM_CONFIG_REG_MODE,
               GB_LAYER_NORM_CONFIG_REG_MODE_WIDTH);

  m.NewBvState(GB_LAYER_NORM_CONFIG_REG_MEMORY_INDEX_1,
               GB_LAYER_NORM_CONFIG_REG_MEMORY_INDEX_1_WIDTH);

  m.NewBvState(GB_LAYER_NORM_CONFIG_REG_NUM_VECTOR_1,
               GB_LAYER_NORM_CONFIG_REG_NUM_VECTOR_1_WIDTH);

  m.NewBvState(GB_LAYER_NORM_CONFIG_REG_NUM_TIMESTEP_1,
               GB_LAYER_NORM_CONFIG_REG_NUM_TIMESTEP_1_WIDTH);

  m.NewBvState(GB_LAYER_NORM_CONFIG_REG_ADPBIAS_1,
               GB_LAYER_NORM_CONFIG_REG_ADPBIAS_1_WIDTH);

  m.NewBvState(GB_LAYER_NORM_CONFIG_REG_ADPBIAS_3,
               GB_LAYER_NORM_CONFIG_REG_ADPBIAS_3_WIDTH);

  m.NewBvState(GB_LAYER_NORM_CONFIG_REG_ADPBIAS_4,
               GB_LAYER_NORM_CONFIG_REG_ADPBIAS_4_WIDTH);

  // GB layer reduce
  m.NewBvState(GB_LAYER_REDUCE_CONFIG_REG_IS_VALID,
               GB_LAYER_REDUCE_CONFIG_REG_IS_VALID_WIDTH);

  m.NewBvState(GB_LAYER_REDUCE_CONFIG_REG_MODE,
               GB_LAYER_REDUCE_CONFIG_REG_MODE_WIDTH);

  m.NewBvState(GB_LAYER_REDUCE_CONFIG_REG_MEMORY_INDEX_1,
               GB_LAYER_REDUCE_CONFIG_REG_MEMORY_INDEX_1_WIDTH);

  m.NewBvState(GB_LAYER_REDUCE_CONFIG_REG_NUM_VECTOR_1,
               GB_LAYER_REDUCE_CONFIG_REG_NUM_VECTOR_1_WIDTH);

  m.NewBvState(GB_LAYER_REDUCE_CONFIG_REG_NUM_TIMESTEP_1,
               GB_LAYER_REDUCE_CONFIG_REG_NUM_TIMESTEP_1_WIDTH);

  // GB zero padding
  m.NewBvState(GB_ZERO_PADDING_CONFIG_REG_IS_VALID,
               GB_ZERO_PADDING_CONFIG_REG_IS_VALID_WIDTH);

  m.NewBvState(GB_ZERO_PADDING_CONFIG_REG_MEMORY_INDEX_1,
               GB_ZERO_PADDING_CONFIG_REG_MEMORY_INDEX_1_WIDTH);

  m.NewBvState(GB_ZERO_PADDING_CONFIG_REG_NUM_VECTOR_1,
               GB_ZERO_PADDING_CONFIG_REG_NUM_VECTOR_1_WIDTH);

  m.NewBvState(GB_ZERO_PADDING_CONFIG_REG_NUM_TIMESTEP_1,
               GB_ZERO_PADDING_CONFIG_REG_NUM_TIMESTEP_1_WIDTH);

  m.NewBvState(GB_ZERO_PADDING_CONFIG_REG_NUM_TIMESTEP_2,
               GB_ZERO_PADDING_CONFIG_REG_NUM_TIMESTEP_2_WIDTH);
};

} // namespace flex

} // namespace ilang
